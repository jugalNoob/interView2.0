::::::DataTypes in javascript
typeof "John"                 // Returns "string"
typeof 3.14                   // Returns "number"
typeof NaN                    // Returns "number"
typeof false                  // Returns "boolean"
typeof [1,2,3,4]              // Returns "object"
typeof {name:'John', age:34}  // Returns "object"
typeof new Date()             // Returns "object"
typeof funeturns "undefined" *
typeof null                   // Returns "object


let data = 41234534454n;
  console.log(typeof(data)); // Outputs the BigInt number
  
  let datas=BigInt(2533544554)
  console.log(typeof(datas))

  
let is=45

  console.log(isNaN(45))
  
  console.log(isFinite(45)); // Outputs false
  
  


Types of JavaScript Operators 
Arithmetic Operators
+	Addition
-	Subtraction
ction () {}         // Returns "function"
typeof myCar                  // R*	Multiplication
**	Exponentiation (ES2016)
/	Division
%	Modulus (Remainder)
++	Increment
--	Decrement
+=	Add and assign

|||||||||||||||||||||||
Assignment Operators
=	x = y	x = y
+=	x += y	x = x + y
-=	x -= y	x = x - y
*=	x *= y	x = x * y
/=	x /= y	x = x / y
%=	x %= y	x = x % y
**=	x **= y	x = x ** y
|||||||||||||||||||||||||||||
Comparison Operators
==	equal to	x == 8	false
x == 8	false	
x == 5	true	
x == "5"	true
x === 5	true	
x === "5"	false
!=	not equal	x != 8	true
>	greater than	x > 8	false	
<	less than	x < 8	true	
>=	greater than or equal to	x >= 8	false	
<=	less than or equal to	x <= 8	true


String Operators
You can compare strings using comparison operators like ==, ===, !=, !==, <, >, <=, and >=.
var str1 = "apple";
var str2 = "banana";
var result = str1 < str2; // result will be true because "apple" comes before "banana" in lexicographical order.


Logical Operators
&&=	x &&= y	x = x && (x = y)
||=	x ||= y	x = x || (x = y)
??=	x ??= y	x = x ?? (x = y)
&&	and	(x < 10 && y > 1) is true	
||	or	(x == 5 || y == 5) is false	
!	not	!(x == y) is true


let age = 18;
  let age1 = 18;
  
  if (age > 19 && age1 > 19) {
      console.log(true);
  } else {
      console.log(false);
  }

let age1 = 18;
  let age2 = 20;
  
  const op = [30, 25]; // Create an array with values
  
  [age1, age2] = op; // Destructuring assignment to update age1 and age2
  
  if (age1 > 25 || age2 > 25) {
    console.log(true); // If either age1 or age2 is greater than 25, print true
  } else {
    console.log(false); // If both age1 and age2 are 25 or less, print false
  }



||||||||||||||||||||||
Bitwise Operators
&=	x &= y	x = x & y
^=	x ^= y	x = x ^ y
|=	x |= y	x = x | y

|||||||||||||||
Ternary Operators
let voteable = (age < 18) ? "Too young":"Old enough";
    age = Number(age);
    if (isNaN(age)) {
      voteable = "Input is not a number";
    } else {
      voteable = (age < 18) ? "Too young" : "Old enough";
    }

|||||||||||||
Shift Assignment Operators
<<=	x <<= y	x = x << y
>>=	x >>= y	x = x >> y
>>>=	x >>>= y	x = x >>> y

||||||||||||||||||
The Nullish Coalescing Operator (??)
let name = null;
    let text = "missing";
    let result = name ?? text;


Type Operators



:::::::All Function In Jvaascript

00::function CallBack
1::JavaScript Async 
1::Function highOrder 
2::Function curring 
3::Function iiff
function functionName(parameter1, parameter2, parameter3) {
    // code to be executed
  }
5::Function express
7::function call
8::function bind
9::function apply
The apply() Method with Arguments
const person = {
  fullName: function(city, country) {
    return this.firstName + " " + this.lastName + "," + city + "," + country;
  }
}

const person1 = {
  firstName:"John",
  lastName: "Doe"
}

person.fullName.apply(person1, ["Oslo", "Norway"]);
|||||||||
6::Function closure
7::Function prototype
8::Function thisKeyword
9::Function bindCallApply
::Function generator
::Arrow Function
Arrow Functions Return Value by Default: ::hello = () => "Hello World!";

10::data Time
let date = new Date();
  console.log(date);
  


12::for Loop

13:: while Loop

14::do-while loop

15::for In

16::for of

17::Array
Array length
Array toString()
let one=[10 , 20 , 320 , 40 , 50]
  console.log(one.toString())

  |||||||||||||||
Array pop()
Array push()
Array shift()
Array unshift()
Array join()
|||||||||Every Import 
let age = [10, 20, 30, 10];

  const one= age.every((key)=>{
   return key >35
 })
 console.log(one , "yes")


 |||||Some ||||||||||||||||


 


Array delete()
Array concat()
let ne=["jugal" , "karan" , "jio" , "artial"]
  let two=[10 , 20 , 30 , 40]
  ne.push(...two)
  console.log(ne)
  
Array flat()
const array = [1, 2, [3, 4], 5];
const flattenedArray = array.flat();
console.log(flattenedArray); //
Array splice()
Array slice()


 18::String
 String length
String slice()
String substring()
String substr()
String replace()
String replaceAll()
const originalString = "Hello, world! Hello, universe!";
const newString = originalString.replaceAll("Hello", "Hi");
console.log(newString); // Output: "Hi, world! Hi, universe!"

String toUpperCase()
String toLowerCase()
String concat()
String trim()
let str = "jugalsharma";
  // Using trimEnd to remove trailing whitespace
  if (str.trimEnd) {
      console.log(str.trimEnd());
  } else {
      console.log("trimEnd is not supported in this environment.");
  }
  
String trimStart()
String trimEnd()
String padStart()
let str = "jugal";
  let paddedStr = str.padEnd(12, 6952);
  console.log(paddedStr);
String padEnd()
String charAt()
String charCodeAt()
String split()

let str = "jugal jugal karan jugal";
  const regex = /jugal/g; // Regular expression to match "jugal" globally
  
  const matches = [...str.matchAll(regex)];
  
  for (const match of matches) {
      console.log(match[0]); // match[0] contains the matched string
  }
  

19::Maps ||||||||||||||||||||||||||||||||||||||||||||
const fruits = new Map([
  ["apples", 500],
  ["bananas", 300],
  ["oranges", 200]
]);
new Map()	Creates a new Map
set()	Sets the value for a key in a Map
get()	Gets the value for a key in a Map
delete()	Removes a Map element specified by the key
has()	Returns true if a key exists in a Map
forEach()	Calls a function for each key/value pair in a Map
entries()	Returns an iterator with the [key, value] pairs in a Map
Property	Description
size	Returns the number of elements in a Map


20::Set |||||||||||||||||||||||||||||||||||||||||
new Set()	Creates a new Set
add()	Adds a new element to the Set
delete()	Removes an element from a Set
has()	Returns true if a value exists in the Set
forEach()	Invokes a callback for each element in the Set
values()	Returns an iterator with all the values in a Set
Property	Description
size	Returns the number of elements in a Set

21::WeakSet

22:WeakMaps

23::Hoisted

::::::Number Methods |||||||

Number()
parseFloat()
parseInt()

The Number method toString() does the same.

x.toString()
(123).toString()
(100 + 23).toString()

:::In the chapter Number Methods, you will find more
 methods that can be used to convert numbers to strings:

 toExponential()	
 let num = 12345.6789;
  let exponential = num.toExponential(2); // Output: "1.23e+4"
  
toPrecision()
let num = 12345.6789;
  let precision = num.toPrecision(5); // Output: "12345"
  
toFixed()
let num = 12345.6789;
  let fixed = num.toFixed(2); // Output: "12345.68"
  



::::Types of error in javscript ||||||||||||||||||||||||||||||||
The try statement defines a code block to run (to try).\

    try {
        Block of code to try
      }
      catch(err) {
        Block of code to handle errors
      }

    The catch:: statement defines a code block to handle any error.
    
    The finally:: statement defines a code block to run regardless of the result.
        try {
            Block of code to try
          }
          catch(err) {
            Block of code to handle errors
          }
          finally {
            Block of code to be executed regardless of the try / catch result
          }

        |||||||||||||||||||||||||||||||||||||||||||||
    The throw:: statement defines a custom error.
    try {
        if(x.trim() == "") throw "empty";
        if(isNaN(x)) throw "not a number";
        x = Number(x);
        if(x < 5) throw "too low";
        if(x > 10) throw "too high";
      }



|||||||||||||||||||Throtted||||||||||||
  <button onclick="sendEmail()">sendEmail</button>
let count = 1;
let isThrottled = false;
function sendEmail() {

    let i="my name is number"
    if (!isThrottled) {
        console.log('Sending', count++ , i);
        isThrottled = true;
        setTimeout(() => {
            isThrottled = false;
        }, 1000);
    }
}


||||||||||||||||||||Debounce |||||||||||||||||||||||||-
<button onclick="debounce(sendEmail, 1000)">Send Email</button>

<script>
let count = 1;
let timeout;

function sendEmail() {
    let i = "my name is number";
    console.log('Sending', count++, i);
}
function debounce(func, delay) {
    clearTimeout(timeout);
    timeout = setTimeout(func, delay);
}
</script>




:::::::Data Time

Data new()
now data

getDate()	Get the day as a number (1-31)
getDay()	Get the weekday a number (0-6)
getFullYear()	Get the four digit year (yyyy)
getHours()	Get the hour (0-23)
getMilliseconds()	Get the milliseconds (0-999)
getMinutes()	Get the minutes (0-59)
getMonth()	Get the month (0-11)
getSeconds()	Get the seconds (0-59)
getTime()	Get the time (milliseconds since January 1, 1970)


::::JavaScript Scope  ||||||||||||||
Scope determines the accessibility (visibility) of variables.

JavaScript has 3 types of scope:

Block scope
Function scope
Global scope


..Block Scope
Variables declared with the var keyword can NOT have block scope.

{
  let x = 2;
}
// x can NOT be used here


......Local Scope
Variables declared within a JavaScript function, become
     LOCAL to the function.

        // code here can NOT use carName

        function myFunction() {
          let carName = "Volvo";
          // code here CAN use carName
        }
        
        // code here can NOT use carName



...Function Scope
Variables defined inside a function are not accessible
     (visible) from outside the function.
     function myFunction() {
        var carName = "Volvo";   // Function Scope
      }

      function myFunction() {
        let carName = "Volvo";   // Function Scope
      }


 ...     Global JavaScript Variables

 let carName = "Volvo";
    // code here can use carName
    
    function myFunction() {
    // code here can also use carName
    }]

    ||||||||||Js Bropwser BOM

    window.location.href ||| returns the href (URL) of the current page
window.location.hostname |||returns the domain name of the web host
window.location.pathname ||| returns the path and filename of the current page
window.location.protocol |||returns the web protocol used (http: or https:)
window.location.assign() ||loads a new document

Window History|||||||||||
window.history 
history.back() 
history.forward() 


|||||||Window Navigator


if (navigator.cookieEnabled) {
  console.log("Cookies are enabled in the browser.");
} else {
  console.log("Cookies are disabled in the browser. Please enable them for full functionality.");
}

const appCodeName = navigator.appCodeName;
console.log("Browser Code Name: " + appCodeName);
const platform = navigator.platform;
console.log("Platform: " + platform);


const userAgentData = navigator.userAgentData;
console.log("User Agent Data: " + JSON.stringify(userAgentData));


if ("geolocation" in navigator) {
navigator.geolocation.getCurrentPosition(function(position) {
    console.log("Latitude: " + position.coords.latitude);
    console.log("Longitude: " + position.coords.longitude);
});
} else {
console.log("Geolocation is not supported in this browser.");
}


const language = navigator.language;
console.log("Preferred Language: " + language);

const userAgent = navigator.userAgent;
console.log("User-Agent String: " + userAgent);






|||||||||||||JavaScript Popup Boxes
window.alert("sometext");

if (confirm("Press a button!")) {
    txt = "You pressed OK!";
  } else {
    txt = "You pressed Cancel!";
  }

  let person = prompt("Please enter your name", "Harry Potter");
    let text;
    if (person == null || person == "") {
      text = "User cancelled the prompt.";
    } else {
      text = "Hello " + person + "! How are you today?";
    }

    window.setTimeout(function, milliseconds);
 

    ||||||||||JavaScript Events |||||||||||||||

    onchange	An HTML element has been changed

   onclick::The user clicks an HTML element
onmouseover	::The user moves the mouse over an HTML element
onmouseout::	The user moves the mouse away from an HTML element
onkeydown::	The user pushes a keyboard key
onload::	The browser has finished loading the page


|||||||||||Javascript Math |||||||||||||||


Math.log(x) returns the natural logarithm of x.

Math.log(1);

Math.log(2);

Math.random()

Math.max(0, 150, 30, 20, -8, -200);

Math.min(0, 150, 30, 20, -8, -200);

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Math.abs(-4.7);

Math.sqrt(64);

Math.pow(8, 2);

Math.sign(-4);
Math.sign(0);
Math.sign(4);
Math.floor(4.9);
Math.ceil(4.9);
Math.round(4.6);
Math.floor(Math.random() * 100) + 1;


|||||||Conditional Statements ||||||||||||||


if 

else

else if

  switch


  What is JSON? |||||||||||||||||
  JSON stands for JavaScript Object Notation

  {
"employees":[
  {"firstName":"John", "lastName":"Doe"},
  {"firstName":"Anna", "lastName":"Smith"},
  {"firstName":"Peter", "lastName":"Jones"}
]
}



Window Screen |||||||||||||||
screen.width
screen.height
screen.availWidth
screen.availHeight
screen.colorDepth
screen.pixelDepth


|||||||||||||||||Javascript Objects ||||||||||


let str="jugal"
  let count={}
  count["name"]=str
  console.log(count)
  ///////
  //changes
  a.name="kanran"
  //deletes
  delete a.ineer
  //add values
  a.city="mimam"
  a['pin code']=181123
  console.log(a.name)
  console.log(a)
  console.log("city" in a)
  console.log(a.getData())
  // console.log(a.ineer.names)
  
  for(item in a){
      console.warn(item)
      console.log("key" + a[item])
  }
  
  let data = {
      name: ["jugal", "sharma"],
      class: "10th"
  };
  
  let str = "jua";
  
  console.log(data.name.includes("jugal")); // Check if "jugal" is in the array
  console.log(str.includes("j")); // Check if "j" is in the string "jua"

  
  let objs=Object.freeze(obj) //freeze not update
    obj.name="jugal sharma" // freeze not update
    delete objs.name; //your freeze name delete
    console.log(obj)

    console.log("object1" , Object.entries(obj)) //convert to array 

    console.log("object1" , Object.values(obj)) //convert to array show  values 

    console.log("object1" , Object.keys(obj)) //convert to keys